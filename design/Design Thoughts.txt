Design Thoughts
===============

Separation of concerns
----------------------
- LessMS is just a CMS - can use web components in it or not
- Any web components used in content could be used in any other site
- Web components used in its implementation, but doesn't mean have to use them in content
- SO - put user web components elsewhere

Components
----------
- Non-UI web components should still have a debugging interface to show what going on, can be turned on and off
- Web components can have a standard prop setting interface, usable in CKEditor or elsewhere, that sets properties - and reflect in attribute
- Background web components should be visible in editing view, and show their settings
- When setting property to refer to another component by id, just click on it
- Linking components - by id or nesting or in content?
- Ways to edit structured data JSON files and store in CMS


- Data - JSON inline in host doc
- Data - references another file
- JSON Editor from JSON Schema, with undo by saving version each time it changes

Component communication
-----------------------
- If A wants C to do something using data from B (eg file browser, file loader, editor)

Pattern 1 - Instruction passing: (Restaurant with numbered tables)
- A can send event with instruction object (eg Edit, path)
- B listens for events from A, gets data, fires event containing data and instruction
- C listens for events from B, knows what to do when event with instruction and data received

Pattern 2 - Instruction matching
- A sends event with instruction object (eg Edit, path)
- C listens for events from A, fires a retrieve data event (eg path), stores instruction against path
- B listens for events from C, gets data, fires event containing data and path
- C listens for events from B, matches up path with instruction, knows what to do with data

Pattern 3 - Simultaneous instructions
- A sends event with instruction object (eg Edit, path)
- B listens for events from A, gets data, fires event containing data and path
- C listens for events from A, stores instruction against path
- C listens for events from B, matches up path with instruction, knows what to do with data

Pattern 4 - Separate events for each action
- A sends edit event with path
- B listens for edit events from A, gets data, fires fileLoadedForEdit event containing data and path
- C listens for fileLoadedForEdit events from B, knows what to do when event with path and data received
- B2 listens for view events from A, gets data, fires fileLoadedForView event containing data and path
- C listens for fileLoadedForView events from B2, knows what to do when event with path and data received

- Communicating with properties gives you a great debugging tool - you can just inspect the latest value

Component communication 2
-------------------------
- Wrapper component wants to pass on events from sub-component eg browser editor exposing events from file-list and editors
- Need common pattern/behaviour to do this

Component editing
-----------------

- Use JSON editor with JSON Schema generated from property defs


Admin
-----
- Admin pages to view/adjust all users
- Instant setup scripts to create a bucket and set it up as your CMS

Single-user mode
----------------
- Everything directly under bucket root - good for standalone websites
- Still allow multiple users

Preview/publish
---------------
- Different bucket?
- Two copies?
- Redirect from preview unless edited version there
- Editor loads from preview (via redirect), writes back to preview
- Publish done in client or server - move each file and replace with redirect

Versioned mode
--------------
- Link to Github
- Could have several versions before publishing
- Linked to asset naming and optimisation

Optimisation
------------
- Gzip files in place on S3
- File sizes and other metadata in user data file
- Assets versioned when publish, long expiry
- Main files not versioned, but etag

Data objects
------------
- Convention: data dir, subdirs for each object type named after object type, schema in each object type dir
- Editor looks for schema in same dir
